{% set all_cases_and_investigations = props.all_cases_and_investigations %}
{% set cases_posts = props.cases_posts %}
{% set categories = props.categories %}
{% set tags = props.tags %}
{% set active_investigations = props.active_investigations %}
{% set case_status_buttons = props.case_status_buttons %}

{# Filter tags to only show parent tags in filter buttons #}
{% set parent_tags = [] %}
{% if tags %}
    {% for tag in tags %}
        {% if tag.parent == 0 %}
            {% set parent_tags = parent_tags|merge([tag]) %}
        {% endif %}
    {% endfor %}
{% endif %}

<section class="relative">
    <div class="site-max site-grid pt-80 s:pt-120 pb-80 s:pb-160" data-component="casesAjaxFilter">
        
            <div class="s:col-start-1 col-span-full s:col-span-6 pb-65 s:pb-0">
                <h2 class="font-sans text-32 s:text-40 font-normal leading-[1.15] tracking-[-1%] text-green">{{ all_cases_and_investigations.title }}</h2>
            </div>

            <div class="relative s:col-start-9 col-span-full s:col-span-8 flex justify-end">
                <div class="relative pr-150 s:pr-0 overflow-x-auto s:overflow-x-visible scrollbar-hide flex items-start s:items-center justify-start s:justify-center flex-nowrap s:flex-wrap">
                    <button class="relative whitespace-nowrap s:whitespace-normal py-16 px-24 font-sans text-12 font-medium leading-none tracking-[0.12rem] uppercase border-[0.1rem] !border-r-0 border-solid border-grey-taupe bg-white-smoke" type="button" aria-label="Button to filter by all" data-filter="all">All</button>
                    {% for button in case_status_buttons %}
                        <button class="relative whitespace-nowrap s:whitespace-normal py-16 px-24 font-sans text-12 font-medium leading-none tracking-[0.12rem] uppercase border-[0.1rem] {{ loop.last ? 'border-r-[0.1rem]' : '!border-r-0' }} border-solid border-grey-taupe" type="button" aria-label="Button to filter by {{ button.name }}" data-filter="{{ button.slug }}">{{ button.name }}</button>
                    {% endfor %}
                </div>

                <div class="newsroom-gradient select-none pointer-events-none absolute top-0 -right-20 w-[15rem] h-full block s:hidden"></div>
                <div class="absolute top-1/2 -translate-y-1/2 -right-10 block s:hidden select-none pointer-events-none">
                    <button class="relative pointer-events-auto flex items-center justify-center bg-white-smoke p-8 rounded-[0.4rem] js-filter-scroll-btn" type="button" aria-label="Button to scroll the filters">
                        <svg class="w-[0.7rem] h-auto" viewBox="0 0 7 11" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M1.57813 1L6.07813 5.5L1.57812 10" stroke="#1E383E" stroke-width="1.3" stroke-linecap="round" stroke-linejoin="round"></path>
                        </svg>
                    </button>
                </div>
            </div>

            {# Posts container that will be replaced via AJAX #}
            <div class="col-start-1 col-span-full pt-30 s:pt-50 js-cases-posts">
                <div class="relative grid grid-cols-3 gap-x-30 s:gap-x-24 gap-y-32 s:gap-y-[6.4rem]">
                    {% for post in cases_posts %}
                        {% set feature_content = function('get_field', 'feature_content', post.ID) %}
                        {% set post_link = function('get_permalink', post.ID) %}
                        
                        {% set all_taxonomies = function('get_object_taxonomies', 'cases') %}
                        {% set post_terms = {} %}

                        {% for taxonomy in all_taxonomies %}
                            {% set terms = function('get_the_terms', post.ID, taxonomy) %}
                            {% if terms and terms is not same as(false) %}
                                {% set post_terms = post_terms|merge({(taxonomy): terms}) %}
                            {% endif %}
                        {% endfor %}

                        {# Get case-status terms for filtering #}
                        {% set case_status_terms = post_terms['case-status'] is defined ? post_terms['case-status'] : [] %}

                        {# Build filter classes based on case-status #}
                        {% set filter_classes = ['all'] %}
                        {% if case_status_terms %}
                            {% for status in case_status_terms %}
                                {% if status.slug == 'active-case' or status.slug == 'resolved-case' %}
                                    {% set filter_classes = filter_classes|merge(['cases']) %}
                                {% endif %}
                                {% if status.slug == 'active-investigation' or status.slug == 'resolved-investigation' %}
                                    {% set filter_classes = filter_classes|merge(['investigations']) %}
                                {% endif %}
                                {% if status.slug == 'active-case' or status.slug == 'active-investigation' %}
                                    {% set filter_classes = filter_classes|merge(['active']) %}
                                {% endif %}
                                {% if status.slug == 'resolved-case' or status.slug == 'resolved-investigation' %}
                                    {% set filter_classes = filter_classes|merge(['resolved']) %}
                                {% endif %}
                            {% endfor %}
                        {% else %}
                            {# If no case-status terms, add 'cases' to filter #}
                            {% if post.post_type == 'cases' %}
                                {% set filter_classes = filter_classes|merge(['cases']) %}
                            {% endif %}
                        {% endif %}
                        
                        {# Remove duplicates from filter classes #}
                        {% set filter_classes = filter_classes|reduce((carry, item) => item in carry ? carry : carry|merge([item]), []) %}

                        {# Include the post item template #}
                        {% include 'partials/cases-post-item.twig' with {
                            'post': post,
                            'feature_content': feature_content,
                            'post_link': post_link,
                            'post_terms': post_terms,
                            'case_status_terms': case_status_terms,
                            'filter_classes': filter_classes|join(',')
                        } %}
                    {% endfor %}
                </div>
            </div>

            {# Pagination container that will be replaced via AJAX #}
            <div class="col-start-1 col-span-full pt-30 s:pt-50 js-cases-pagination">
                {# Pagination container that will be replaced via AJAX #}
                
                    {% if cases_posts.pagination and cases_posts.pagination.pages is not empty and cases_posts.pagination.total > 1 %}
                        {% include 'partials/pagination.twig' with {
                            props: {
                                pagination: cases_posts.pagination,
                                items_per_page: 6,
                                items_per_page_options: [6, 12, 18]
                            }
                        } %}
                    {% endif %}
                
            </div>
            
        
    </div>
</section>